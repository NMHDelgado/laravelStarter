Pour mettre en place un système d'authentification complet avec Laravel Sanctum, incluant des **vues**, **modèles**, **contrôleurs**, **migrations** et **routes**, nous allons décomposer tout le processus. Voici les étapes avec tous les éléments nécessaires.

### 1. **Installation de Laravel Sanctum**

Tout d'abord, installez Sanctum via Composer si ce n'est pas encore fait.

```bash
composer require laravel/sanctum
```

Ensuite, publiez le fichier de configuration de Sanctum :

```bash
php artisan vendor:publish --provider="Laravel\Sanctum\SanctumServiceProvider" --tag="config"
```

Effectuez la migration pour créer la table `personal_access_tokens` utilisée par Sanctum :

```bash
php artisan migrate
```

### 2. **Configuration de Sanctum**

Dans le fichier `config/sanctum.php`, vérifiez que le middleware `EnsureFrontendRequestsAreStateful` est activé dans `api.php`.

Dans `app/Http/Kernel.php`, assurez-vous d'ajouter le middleware Sanctum dans la liste des middlewares d'API :

```php
'api' => [
    \Laravel\Sanctum\Http\Middleware\EnsureFrontendRequestsAreStateful::class,
    'throttle:api',
    \Illuminate\Routing\Middleware\SubstituteBindings::class,
],
```

### 3. **Création du modèle User avec Sanctum**

Modifiez le modèle `User` pour utiliser Sanctum.

Dans `app/Models/User.php`, ajoutez `HasApiTokens` à votre modèle `User` pour activer la gestion des tokens.

```php
namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Laravel\Sanctum\HasApiTokens;

class User extends Authenticatable
{
    use HasFactory, HasApiTokens;

    protected $fillable = [
        'name', 'email', 'password',
    ];

    protected $hidden = [
        'password', 'remember_token',
    ];
}
```

### 4. **Création de la Migration pour les Utilisateurs**

Si vous n'avez pas encore créé la migration pour les utilisateurs, vous pouvez utiliser la commande artisan pour créer cette migration.

```bash
php artisan make:migration create_users_table
```

Dans le fichier de migration généré (`database/migrations/YYYY_MM_DD_create_users_table.php`), vous pouvez définir les colonnes nécessaires pour l'utilisateur.

```php
public function up()
{
    Schema::create('users', function (Blueprint $table) {
        $table->id();
        $table->string('name');
        $table->string('email')->unique();
        $table->timestamp('email_verified_at')->nullable();
        $table->string('password');
        $table->rememberToken();
        $table->timestamps();
    });
}
```

Puis, lancez la migration :

```bash
php artisan migrate
```

### 5. **Création des Vues**

Pour simplifier, utilisons des vues Blade pour l'inscription et la connexion. Vous pouvez créer des vues dans `resources/views/auth`.

1. **Inscription (resources/views/auth/register.blade.php)**

```blade
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Register</title>
</head>
<body>
    <form action="{{ route('register') }}" method="POST">
        @csrf
        <label for="name">Name</label>
        <input type="text" name="name" id="name" required>

        <label for="email">Email</label>
        <input type="email" name="email" id="email" required>

        <label for="password">Password</label>
        <input type="password" name="password" id="password" required>

        <button type="submit">Register</button>
    </form>
</body>
</html>
```

2. **Connexion (resources/views/auth/login.blade.php)**

```blade
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Login</title>
</head>
<body>
    <form action="{{ route('login') }}" method="POST">
        @csrf
        <label for="email">Email</label>
        <input type="email" name="email" id="email" required>

        <label for="password">Password</label>
        <input type="password" name="password" id="password" required>

        <button type="submit">Login</button>
    </form>
</body>
</html>
```

### 6. **Création du Contrôleur d'Authentification**

Créez un contrôleur pour gérer l'authentification des utilisateurs. Utilisez la commande artisan pour générer le contrôleur.

```bash
php artisan make:controller AuthController
```

Dans le fichier `app/Http/Controllers/AuthController.php`, ajoutez les méthodes suivantes :

```php
namespace App\Http\Controllers;

use App\Models\User;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Validator;

class AuthController extends Controller
{
    // Afficher la vue d'inscription
    public function showRegister()
    {
        return view('auth.register');
    }

    // Inscription de l'utilisateur
    public function register(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'name' => 'required|string|max:255',
            'email' => 'required|string|email|max:255|unique:users',
            'password' => 'required|string|min:8|confirmed',
        ]);

        if ($validator->fails()) {
            return redirect()->back()->withErrors($validator)->withInput();
        }

        $user = User::create([
            'name' => $request->name,
            'email' => $request->email,
            'password' => Hash::make($request->password),
        ]);

        return redirect()->route('login')->with('success', 'Account created successfully!');
    }

    // Afficher la vue de connexion
    public function showLogin()
    {
        return view('auth.login');
    }

    // Connexion de l'utilisateur
    public function login(Request $request)
    {
        $credentials = $request->only('email', 'password');

        if (Auth::attempt($credentials)) {
            return redirect()->route('dashboard')->with('success', 'Logged in successfully!');
        }

        return redirect()->back()->withErrors(['message' => 'Invalid credentials']);
    }

    // Dashboard (utilisateur connecté)
    public function dashboard()
    {
        return view('dashboard');
    }

    // Déconnexion
    public function logout(Request $request)
    {
        Auth::logout();
        return redirect()->route('login')->with('success', 'Logged out successfully!');
    }
}
```

### 7. **Création des Routes**

Dans `routes/web.php`, ajoutez les routes pour l'authentification :

```php
use App\Http\Controllers\AuthController;

Route::get('register', [AuthController::class, 'showRegister'])->name('register');
Route::post('register', [AuthController::class, 'register']);

Route::get('login', [AuthController::class, 'showLogin'])->name('login');
Route::post('login', [AuthController::class, 'login']);

Route::middleware('auth')->get('dashboard', [AuthController::class, 'dashboard'])->name('dashboard');
Route::post('logout', [AuthController::class, 'logout'])->name('logout');
```

### 8. **Création de la Vue pour le Dashboard**

Ajoutez une vue simple pour le tableau de bord, qui sera accessible une fois l'utilisateur connecté.

```blade
<!-- resources/views/dashboard.blade.php -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard</title>
</head>
<body>
    <h1>Welcome, {{ Auth::user()->name }}</h1>
    <form action="{{ route('logout') }}" method="POST">
        @csrf
        <button type="submit">Logout</button>
    </form>
</body>
</html>
```

### 9. **Test de l'Application**

1. Accédez à `http://localhost/register` pour vous inscrire.
2. Une fois inscrit, vous serez redirigé vers la page de connexion.
3. Accédez à `http://localhost/login` pour vous connecter.
4. Après la connexion, vous serez redirigé vers le tableau de bord où vous pouvez vous déconnecter.

### Résumé

Avec ces étapes, vous avez un système complet d'authentification utilisant **Laravel Sanctum**, avec des vues pour l'inscription, la connexion et le tableau de bord. Les utilisateurs peuvent s'inscrire, se connecter, consulter leurs informations et se déconnecter.





Others

Pour mettre en place un système d'authentification complet avec Laravel Sanctum, incluant des **vues**, **modèles**, **contrôleurs**, **migrations** et **routes**, nous allons décomposer tout le processus. Voici les étapes avec tous les éléments nécessaires.

### 1. **Installation de Laravel Sanctum**

Tout d'abord, installez Sanctum via Composer si ce n'est pas encore fait.

```bash
composer require laravel/sanctum
```

Ensuite, publiez le fichier de configuration de Sanctum :

```bash
php artisan vendor:publish --provider="Laravel\Sanctum\SanctumServiceProvider" --tag="config"
```

Effectuez la migration pour créer la table `personal_access_tokens` utilisée par Sanctum :

```bash
php artisan migrate
```

### 2. **Configuration de Sanctum**

Dans le fichier `config/sanctum.php`, vérifiez que le middleware `EnsureFrontendRequestsAreStateful` est activé dans `api.php`.

Dans `app/Http/Kernel.php`, assurez-vous d'ajouter le middleware Sanctum dans la liste des middlewares d'API :

```php
'api' => [
    \Laravel\Sanctum\Http\Middleware\EnsureFrontendRequestsAreStateful::class,
    'throttle:api',
    \Illuminate\Routing\Middleware\SubstituteBindings::class,
],
```

### 3. **Création du modèle User avec Sanctum**

Modifiez le modèle `User` pour utiliser Sanctum.

Dans `app/Models/User.php`, ajoutez `HasApiTokens` à votre modèle `User` pour activer la gestion des tokens.

```php
namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Laravel\Sanctum\HasApiTokens;

class User extends Authenticatable
{
    use HasFactory, HasApiTokens;

    protected $fillable = [
        'name', 'email', 'password',
    ];

    protected $hidden = [
        'password', 'remember_token',
    ];
}
```

### 4. **Création de la Migration pour les Utilisateurs**

Si vous n'avez pas encore créé la migration pour les utilisateurs, vous pouvez utiliser la commande artisan pour créer cette migration.

```bash
php artisan make:migration create_users_table
```

Dans le fichier de migration généré (`database/migrations/YYYY_MM_DD_create_users_table.php`), vous pouvez définir les colonnes nécessaires pour l'utilisateur.

```php
public function up()
{
    Schema::create('users', function (Blueprint $table) {
        $table->id();
        $table->string('name');
        $table->string('email')->unique();
        $table->timestamp('email_verified_at')->nullable();
        $table->string('password');
        $table->rememberToken();
        $table->timestamps();
    });
}
```

Puis, lancez la migration :

```bash
php artisan migrate
```

### 5. **Création des Vues**

Pour simplifier, utilisons des vues Blade pour l'inscription et la connexion. Vous pouvez créer des vues dans `resources/views/auth`.

1. **Inscription (resources/views/auth/register.blade.php)**

```blade
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Register</title>
</head>
<body>
    <form action="{{ route('register') }}" method="POST">
        @csrf
        <label for="name">Name</label>
        <input type="text" name="name" id="name" required>

        <label for="email">Email</label>
        <input type="email" name="email" id="email" required>

        <label for="password">Password</label>
        <input type="password" name="password" id="password" required>

        <button type="submit">Register</button>
    </form>
</body>
</html>
```

2. **Connexion (resources/views/auth/login.blade.php)**

```blade
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Login</title>
</head>
<body>
    <form action="{{ route('login') }}" method="POST">
        @csrf
        <label for="email">Email</label>
        <input type="email" name="email" id="email" required>

        <label for="password">Password</label>
        <input type="password" name="password" id="password" required>

        <button type="submit">Login</button>
    </form>
</body>
</html>
```

### 6. **Création du Contrôleur d'Authentification**

Créez un contrôleur pour gérer l'authentification des utilisateurs. Utilisez la commande artisan pour générer le contrôleur.

```bash
php artisan make:controller AuthController
```

Dans le fichier `app/Http/Controllers/AuthController.php`, ajoutez les méthodes suivantes :

```php
namespace App\Http\Controllers;

use App\Models\User;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Validator;

class AuthController extends Controller
{
    // Afficher la vue d'inscription
    public function showRegister()
    {
        return view('auth.register');
    }

    // Inscription de l'utilisateur
    public function register(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'name' => 'required|string|max:255',
            'email' => 'required|string|email|max:255|unique:users',
            'password' => 'required|string|min:8|confirmed',
        ]);

        if ($validator->fails()) {
            return redirect()->back()->withErrors($validator)->withInput();
        }

        $user = User::create([
            'name' => $request->name,
            'email' => $request->email,
            'password' => Hash::make($request->password),
        ]);

        return redirect()->route('login')->with('success', 'Account created successfully!');
    }

    // Afficher la vue de connexion
    public function showLogin()
    {
        return view('auth.login');
    }

    // Connexion de l'utilisateur
    public function login(Request $request)
    {
        $credentials = $request->only('email', 'password');

        if (Auth::attempt($credentials)) {
            return redirect()->route('dashboard')->with('success', 'Logged in successfully!');
        }

        return redirect()->back()->withErrors(['message' => 'Invalid credentials']);
    }

    // Dashboard (utilisateur connecté)
    public function dashboard()
    {
        return view('dashboard');
    }

    // Déconnexion
    public function logout(Request $request)
    {
        Auth::logout();
        return redirect()->route('login')->with('success', 'Logged out successfully!');
    }
}
```

### 7. **Création des Routes**

Dans `routes/web.php`, ajoutez les routes pour l'authentification :

```php
use App\Http\Controllers\AuthController;

Route::get('register', [AuthController::class, 'showRegister'])->name('register');
Route::post('register', [AuthController::class, 'register']);

Route::get('login', [AuthController::class, 'showLogin'])->name('login');
Route::post('login', [AuthController::class, 'login']);

Route::middleware('auth')->get('dashboard', [AuthController::class, 'dashboard'])->name('dashboard');
Route::post('logout', [AuthController::class, 'logout'])->name('logout');
```

### 8. **Création de la Vue pour le Dashboard**

Ajoutez une vue simple pour le tableau de bord, qui sera accessible une fois l'utilisateur connecté.

```blade
<!-- resources/views/dashboard.blade.php -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard</title>
</head>
<body>
    <h1>Welcome, {{ Auth::user()->name }}</h1>
    <form action="{{ route('logout') }}" method="POST">
        @csrf
        <button type="submit">Logout</button>
    </form>
</body>
</html>
```

### 9. **Test de l'Application**

1. Accédez à `http://localhost/register` pour vous inscrire.
2. Une fois inscrit, vous serez redirigé vers la page de connexion.
3. Accédez à `http://localhost/login` pour vous connecter.
4. Après la connexion, vous serez redirigé vers le tableau de bord où vous pouvez vous déconnecter.

### Résumé

Avec ces étapes, vous avez un système complet d'authentification utilisant **Laravel Sanctum**, avec des vues pour l'inscription, la connexion et le tableau de bord. Les utilisateurs peuvent s'inscrire, se connecter, consulter leurs informations et se déconnecter.



azerty

Voici un exemple de code complet d'authentification d'un utilisateur en utilisant **Laravel Sanctum** pour une API. Ce code couvre les principales étapes : installation de Sanctum, configuration, création des routes et des contrôleurs.

### 1. Installation de Sanctum

Tout d'abord, il faut installer Sanctum via Composer.

```bash
composer require laravel/sanctum
```

### 2. Publication du fichier de configuration

Ensuite, publiez le fichier de configuration de Sanctum pour personnaliser certains paramètres si nécessaire.

```bash
php artisan vendor:publish --provider="Laravel\Sanctum\SanctumServiceProvider" --tag="config"
```

### 3. Configuration de Sanctum

Dans le fichier `config/sanctum.php`, assurez-vous que le middleware `EnsureFrontendRequestsAreStateful` est configuré si vous prévoyez une interaction avec une SPA (Single Page Application).

### 4. Migration de la table `personal_access_tokens`

Sanctum a besoin d'une table pour stocker les tokens générés pour les utilisateurs. Exécutez la commande suivante pour générer et appliquer la migration :

```bash
php artisan migrate
```

### 5. Modifications dans `User` Model

Ajoutez la méthode `HasApiTokens` dans le modèle `User` si ce n'est pas déjà fait. Cette méthode permet à l'utilisateur de générer des tokens d'authentification.

Dans le fichier `app/Models/User.php`, ajoutez :

```php
use Laravel\Sanctum\HasApiTokens;

class User extends Authenticatable
{
    use HasApiTokens;

    // Autres propriétés et méthodes...
}
```

### 6. Middleware Sanctum

Dans `app/Http/Kernel.php`, ajoutez le middleware `Sanctum` pour protéger les routes d'API.

```php
'api' => [
    \Laravel\Sanctum\Http\Middleware\EnsureFrontendRequestsAreStateful::class,
    'throttle:api',
    \Illuminate\Routing\Middleware\SubstituteBindings::class,
],
```

### 7. Création des Routes d'Authentification

Dans le fichier `routes/api.php`, ajoutez les routes suivantes pour l'inscription, la connexion, la déconnexion et la gestion des tokens.

```php
use App\Http\Controllers\AuthController;
use Illuminate\Support\Facades\Route;

// Route d'inscription
Route::post('register', [AuthController::class, 'register']);

// Route de connexion
Route::post('login', [AuthController::class, 'login']);

// Route protégée par Sanctum
Route::middleware('auth:sanctum')->get('user', [AuthController::class, 'user']);

// Route de déconnexion
Route::middleware('auth:sanctum')->post('logout', [AuthController::class, 'logout']);
```

### 8. Création du Contrôleur `AuthController`

Créez un contrôleur `AuthController` pour gérer les actions liées à l'authentification.

```bash
php artisan make:controller AuthController
```

Dans `app/Http/Controllers/AuthController.php`, ajoutez le code suivant :

```php
namespace App\Http\Controllers;

use App\Models\User;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Validator;
use Illuminate\Support\Facades\Auth;

class AuthController extends Controller
{
    // Inscription
    public function register(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'name' => 'required|string|max:255',
            'email' => 'required|string|email|max:255|unique:users',
            'password' => 'required|string|min:8|confirmed',
        ]);

        if ($validator->fails()) {
            return response()->json($validator->errors(), 400);
        }

        $user = User::create([
            'name' => $request->name,
            'email' => $request->email,
            'password' => Hash::make($request->password),
        ]);

        return response()->json(['message' => 'User registered successfully'], 201);
    }

    // Connexion
    public function login(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'email' => 'required|string|email',
            'password' => 'required|string',
        ]);

        if ($validator->fails()) {
            return response()->json($validator->errors(), 400);
        }

        if (Auth::attempt(['email' => $request->email, 'password' => $request->password])) {
            $user = Auth::user();
            $token = $user->createToken('Personal Access Token')->plainTextToken;

            return response()->json(['token' => $token]);
        }

        return response()->json(['message' => 'Invalid credentials'], 401);
    }

    // Récupérer les informations de l'utilisateur connecté
    public function user(Request $request)
    {
        return response()->json($request->user());
    }

    // Déconnexion
    public function logout(Request $request)
    {
        $request->user()->tokens->each(function ($token) {
            $token->delete();
        });

        return response()->json(['message' => 'Successfully logged out']);
    }
}
```

### 9. Protection des Routes avec Middleware Sanctum

Dans les routes définies dans `routes/api.php`, nous avons ajouté le middleware `auth:sanctum` pour les routes protégées (comme la récupération des informations de l'utilisateur connecté et la déconnexion).

### 10. Test des Routes API

1. **Inscription (POST `/api/register`)**

   Exécutez une requête POST avec les données suivantes :
   ```json
   {
     "name": "John Doe",
     "email": "john@example.com",
     "password": "password123",
     "password_confirmation": "password123"
   }
   ```

2. **Connexion (POST `/api/login`)**

   Exécutez une requête POST avec les données suivantes :
   ```json
   {
     "email": "john@example.com",
     "password": "password123"
   }
   ```

   Vous recevrez un `token` dans la réponse. Utilisez ce token pour les requêtes authentifiées.

3. **Récupérer les informations utilisateur (GET `/api/user`)**

   Ajoutez le `Authorization` header avec le token généré lors de la connexion.

   ```json
   Authorization: Bearer YOUR_TOKEN
   ```

   Vous recevrez les informations de l'utilisateur connecté.

4. **Déconnexion (POST `/api/logout`)**

   Ajoutez le `Authorization` header avec le token généré lors de la connexion. Vous serez déconnecté, et tous les tokens seront supprimés.

---

Voilà, vous avez un système d'authentification complet avec Laravel Sanctum, vous permettant de vous inscrire, de vous connecter, de récupérer les informations utilisateur et de vous déconnecter.